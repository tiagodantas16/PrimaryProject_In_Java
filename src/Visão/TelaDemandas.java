/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visão;

import Conection.ConectionBD;
import ModeloBeans.BeansUsuários;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.Timer;
import EditionDao.DaoUsuario;
import java.net.URL;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.text.Text;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**==999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 n 9
 *
 * @author Tiago Dantas
 */
public class TelaDemandas extends javax.swing.JFrame {
    ConectionBD con = new ConectionBD();
    BeansUsuários mod = new BeansUsuários();
    DaoUsuario dao = new DaoUsuario();
    /**
     * Creates new form TelaDemandas
     */
    public TelaDemandas(String usuario) {
        initComponents();
        lbl_Usuário2.setText(usuario);//Comando que traz o usuário digitado na tela login.
        mod.setUsu_BTipo(lbl_Usuário2.getText());
        BeansUsuários model = dao.buscaTipo(mod);
        lbl_Tipo2.setText(model.getUsu_Tipo());
        mod.setUsu_BPerfil(lbl_Tipo2.getText());
        this.setExtendedState(MAXIMIZED_BOTH);//Comando para executar tela maximizada.
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        
        //Comanda que apresenta a data.
        Date dataSistema = new Date();
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        lbl_Data.setText(formato.format(dataSistema));
        //Comanda que apresenta a data.
        Timer timer = new Timer(1000,new hora());
        timer.start();
        
        }

    private TelaDemandas() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_Var = new javax.swing.JLabel();
        lbl_LogoFlex = new javax.swing.JLabel();
        lbl_LogoNet = new javax.swing.JLabel();
        lbl_Usuário1 = new javax.swing.JLabel();
        lbl_Usuário2 = new javax.swing.JLabel();
        lbl_Tipo1 = new javax.swing.JLabel();
        lbl_Tipo2 = new javax.swing.JLabel();
        lbl_Base1 = new javax.swing.JLabel();
        lbl_Base2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_NvRegua = new javax.swing.JLabel();
        txt_NvRegua = new javax.swing.JTextField();
        lbl_Cidade = new javax.swing.JLabel();
        txt_Cidade = new javax.swing.JTextField();
        lbl_Contrato = new javax.swing.JLabel();
        txt_Contrato = new javax.swing.JTextField();
        txt_NomeCliente = new javax.swing.JTextField();
        lbl_Nome = new javax.swing.JLabel();
        lbl_Segmento = new javax.swing.JLabel();
        txt_Segmento = new javax.swing.JTextField();
        lbl_Cpf = new javax.swing.JLabel();
        FormatTxt_Cpf = new javax.swing.JFormattedTextField();
        jp_Tabulação = new javax.swing.JPanel();
        lbl_Tabulações = new javax.swing.JLabel();
        jp_Geral = new javax.swing.JPanel();
        CheckBox_Revertido = new javax.swing.JCheckBox();
        CheckBox_NãoRevertido = new javax.swing.JCheckBox();
        CheckBox_JaTratado = new javax.swing.JCheckBox();
        CheckBox_Nao_Tratavel = new javax.swing.JCheckBox();
        lbl_Geral = new javax.swing.JLabel();
        jp_Desconexao = new javax.swing.JPanel();
        lbl_Desconexao = new javax.swing.JLabel();
        CheckBox_DescOpcao = new javax.swing.JCheckBox();
        CheckBox_DescInad = new javax.swing.JCheckBox();
        CheckBox_DescJáGerada = new javax.swing.JCheckBox();
        jp_AuditoriaOS = new javax.swing.JPanel();
        lbl_AuditoriaOS = new javax.swing.JLabel();
        CheckBox_Cancelada = new javax.swing.JCheckBox();
        CheckBox_JaCancelada = new javax.swing.JCheckBox();
        CheckBox_Executada = new javax.swing.JCheckBox();
        CheckBox_Desconectado = new javax.swing.JCheckBox();
        CheckBox_Reinstalação = new javax.swing.JCheckBox();
        CheckBox_ErroGerDesc = new javax.swing.JCheckBox();
        CheckBox_MudancaPacote = new javax.swing.JCheckBox();
        CheckBox_MudancaEndereco = new javax.swing.JCheckBox();
        CheckBox_Cancelado = new javax.swing.JCheckBox();
        CheckBox_Portabilidade = new javax.swing.JCheckBox();
        jp_Adequação = new javax.swing.JPanel();
        lbl_AuditoriaOS1 = new javax.swing.JLabel();
        CheckBox_Completa = new javax.swing.JCheckBox();
        CheckBox_Pendente = new javax.swing.JCheckBox();
        CheckBox_Conflito = new javax.swing.JCheckBox();
        CheckBox_Suspenso = new javax.swing.JCheckBox();
        CheckBox_ErroTec = new javax.swing.JCheckBox();
        lbl_Hora = new javax.swing.JLabel();
        lbl_Data = new javax.swing.JLabel();
        btn_Iniciar = new javax.swing.JButton();
        btn_Pausar = new javax.swing.JButton();
        btn_Sair = new javax.swing.JButton();
        btn_Salvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ION");

        lbl_LogoFlex.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Selo Flex - Geral.png"))); // NOI18N

        lbl_LogoNet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/Selo Net - Geral.png"))); // NOI18N

        lbl_Usuário1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Usuário1.setText("USUÁRIO:");
        lbl_Usuário1.setEnabled(false);

        lbl_Usuário2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Usuário2.setForeground(new java.awt.Color(255, 0, 0));

        lbl_Tipo1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Tipo1.setText("PERFIL:");
        lbl_Tipo1.setEnabled(false);

        lbl_Tipo2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Tipo2.setForeground(new java.awt.Color(255, 0, 0));

        lbl_Base1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Base1.setText("BASE:");
        lbl_Base1.setEnabled(false);

        lbl_Base2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Base2.setForeground(new java.awt.Color(255, 0, 0));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lbl_NvRegua.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lbl_NvRegua.setText("NV. RG:");

        txt_NvRegua.setEditable(false);
        txt_NvRegua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_NvReguaActionPerformed(evt);
            }
        });

        lbl_Cidade.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lbl_Cidade.setText("CÓD. CIDADE:");

        txt_Cidade.setEditable(false);
        txt_Cidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_CidadeActionPerformed(evt);
            }
        });

        lbl_Contrato.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lbl_Contrato.setText("CONTRATO:");

        txt_Contrato.setEditable(false);
        txt_Contrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_ContratoActionPerformed(evt);
            }
        });

        txt_NomeCliente.setEditable(false);
        txt_NomeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_NomeClienteActionPerformed(evt);
            }
        });

        lbl_Nome.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lbl_Nome.setText("CLIENTE:");

        lbl_Segmento.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lbl_Segmento.setText("SEGMENTO:");

        txt_Segmento.setEditable(false);
        txt_Segmento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_SegmentoActionPerformed(evt);
            }
        });

        lbl_Cpf.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        lbl_Cpf.setText("CPF:");

        try {
            FormatTxt_Cpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter(" ###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jp_Tabulação.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jp_Tabulação.setEnabled(false);

        lbl_Tabulações.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Tabulações.setText("TABULAÇÕES");

        jp_Geral.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        CheckBox_Revertido.setText("Revertido");
        CheckBox_Revertido.setEnabled(false);
        CheckBox_Revertido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_RevertidoActionPerformed(evt);
            }
        });

        CheckBox_NãoRevertido.setText("Não Revertido");
        CheckBox_NãoRevertido.setEnabled(false);
        CheckBox_NãoRevertido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_NãoRevertidoActionPerformed(evt);
            }
        });

        CheckBox_JaTratado.setText("Já Tratado");
        CheckBox_JaTratado.setEnabled(false);
        CheckBox_JaTratado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_JaTratadoActionPerformed(evt);
            }
        });

        CheckBox_Nao_Tratavel.setText("Não Tratavel");
        CheckBox_Nao_Tratavel.setEnabled(false);
        CheckBox_Nao_Tratavel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_Nao_TratavelActionPerformed(evt);
            }
        });

        lbl_Geral.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Geral.setText("Geral:");

        javax.swing.GroupLayout jp_GeralLayout = new javax.swing.GroupLayout(jp_Geral);
        jp_Geral.setLayout(jp_GeralLayout);
        jp_GeralLayout.setHorizontalGroup(
            jp_GeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_GeralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Geral, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(CheckBox_Revertido, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckBox_NãoRevertido)
                .addGap(18, 18, 18)
                .addComponent(CheckBox_JaTratado)
                .addGap(18, 18, 18)
                .addComponent(CheckBox_Nao_Tratavel)
                .addContainerGap())
        );
        jp_GeralLayout.setVerticalGroup(
            jp_GeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_GeralLayout.createSequentialGroup()
                .addGroup(jp_GeralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBox_Revertido)
                    .addComponent(CheckBox_NãoRevertido)
                    .addComponent(CheckBox_JaTratado)
                    .addComponent(lbl_Geral, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBox_Nao_Tratavel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jp_Desconexao.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_Desconexao.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_Desconexao.setText("Desconexão:");

        CheckBox_DescOpcao.setText("Gerado Desc - Opção");
        CheckBox_DescOpcao.setEnabled(false);
        CheckBox_DescOpcao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_DescOpcaoActionPerformed(evt);
            }
        });

        CheckBox_DescInad.setText("Gerado Desc - Inad");
        CheckBox_DescInad.setEnabled(false);
        CheckBox_DescInad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_DescInadActionPerformed(evt);
            }
        });

        CheckBox_DescJáGerada.setText("Desc. Já Gerada");
        CheckBox_DescJáGerada.setEnabled(false);
        CheckBox_DescJáGerada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_DescJáGeradaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_DesconexaoLayout = new javax.swing.GroupLayout(jp_Desconexao);
        jp_Desconexao.setLayout(jp_DesconexaoLayout);
        jp_DesconexaoLayout.setHorizontalGroup(
            jp_DesconexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_DesconexaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_Desconexao)
                .addGap(22, 22, 22)
                .addComponent(CheckBox_DescOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckBox_DescInad)
                .addGap(18, 18, 18)
                .addComponent(CheckBox_DescJáGerada)
                .addContainerGap())
        );
        jp_DesconexaoLayout.setVerticalGroup(
            jp_DesconexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_DesconexaoLayout.createSequentialGroup()
                .addGroup(jp_DesconexaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_Desconexao)
                    .addComponent(CheckBox_DescOpcao)
                    .addComponent(CheckBox_DescInad)
                    .addComponent(CheckBox_DescJáGerada))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jp_AuditoriaOS.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_AuditoriaOS.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_AuditoriaOS.setText("Auditoria - OS:");

        CheckBox_Cancelada.setText("Cancelada");
        CheckBox_Cancelada.setEnabled(false);
        CheckBox_Cancelada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_CanceladaActionPerformed(evt);
            }
        });

        CheckBox_JaCancelada.setText("Já Cancelada");
        CheckBox_JaCancelada.setEnabled(false);
        CheckBox_JaCancelada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_JaCanceladaActionPerformed(evt);
            }
        });

        CheckBox_Executada.setText("Executada");
        CheckBox_Executada.setEnabled(false);
        CheckBox_Executada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_ExecutadaActionPerformed(evt);
            }
        });

        CheckBox_Desconectado.setText("Desconectado");
        CheckBox_Desconectado.setEnabled(false);
        CheckBox_Desconectado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_DesconectadoActionPerformed(evt);
            }
        });

        CheckBox_Reinstalação.setText("Reinstalação");
        CheckBox_Reinstalação.setEnabled(false);
        CheckBox_Reinstalação.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_ReinstalaçãoActionPerformed(evt);
            }
        });

        CheckBox_ErroGerDesc.setText("Erro Ao Gerar Desconexão");
        CheckBox_ErroGerDesc.setEnabled(false);
        CheckBox_ErroGerDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_ErroGerDescActionPerformed(evt);
            }
        });

        CheckBox_MudancaPacote.setText("Mud. Pacote");
        CheckBox_MudancaPacote.setEnabled(false);
        CheckBox_MudancaPacote.setPreferredSize(new java.awt.Dimension(93, 23));
        CheckBox_MudancaPacote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_MudancaPacoteActionPerformed(evt);
            }
        });

        CheckBox_MudancaEndereco.setText("Mud. Endereço");
        CheckBox_MudancaEndereco.setEnabled(false);
        CheckBox_MudancaEndereco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_MudancaEnderecoActionPerformed(evt);
            }
        });

        CheckBox_Cancelado.setText("Cancelado");
        CheckBox_Cancelado.setEnabled(false);
        CheckBox_Cancelado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_CanceladoActionPerformed(evt);
            }
        });

        CheckBox_Portabilidade.setText("Em Portabilidade");
        CheckBox_Portabilidade.setEnabled(false);
        CheckBox_Portabilidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_PortabilidadeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_AuditoriaOSLayout = new javax.swing.GroupLayout(jp_AuditoriaOS);
        jp_AuditoriaOS.setLayout(jp_AuditoriaOSLayout);
        jp_AuditoriaOSLayout.setHorizontalGroup(
            jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_AuditoriaOSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_AuditoriaOS)
                .addGap(15, 15, 15)
                .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckBox_MudancaPacote, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBox_Reinstalação)
                    .addComponent(CheckBox_Cancelada))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp_AuditoriaOSLayout.createSequentialGroup()
                        .addComponent(CheckBox_ErroGerDesc)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jp_AuditoriaOSLayout.createSequentialGroup()
                        .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp_AuditoriaOSLayout.createSequentialGroup()
                                .addComponent(CheckBox_JaCancelada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(6, 6, 6))
                            .addComponent(CheckBox_Portabilidade))
                        .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBox_Executada)
                            .addComponent(CheckBox_Cancelado))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBox_MudancaEndereco)
                            .addComponent(CheckBox_Desconectado, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jp_AuditoriaOSLayout.setVerticalGroup(
            jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_AuditoriaOSLayout.createSequentialGroup()
                .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_AuditoriaOS)
                    .addComponent(CheckBox_Cancelada)
                    .addComponent(CheckBox_JaCancelada)
                    .addComponent(CheckBox_Executada)
                    .addComponent(CheckBox_Desconectado))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBox_Reinstalação)
                    .addComponent(CheckBox_Portabilidade)
                    .addComponent(CheckBox_Cancelado)
                    .addComponent(CheckBox_MudancaEndereco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp_AuditoriaOSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBox_ErroGerDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CheckBox_MudancaPacote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jp_Adequação.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbl_AuditoriaOS1.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbl_AuditoriaOS1.setText("Adequação:");

        CheckBox_Completa.setText("Completa");
        CheckBox_Completa.setEnabled(false);
        CheckBox_Completa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_CompletaActionPerformed(evt);
            }
        });

        CheckBox_Pendente.setText("Pendente");
        CheckBox_Pendente.setEnabled(false);
        CheckBox_Pendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_PendenteActionPerformed(evt);
            }
        });

        CheckBox_Conflito.setText("Conflito");
        CheckBox_Conflito.setEnabled(false);
        CheckBox_Conflito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_ConflitoActionPerformed(evt);
            }
        });

        CheckBox_Suspenso.setText("Suspenso");
        CheckBox_Suspenso.setEnabled(false);
        CheckBox_Suspenso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_SuspensoActionPerformed(evt);
            }
        });

        CheckBox_ErroTec.setText("Erro Na Aba Técnico");
        CheckBox_ErroTec.setEnabled(false);
        CheckBox_ErroTec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBox_ErroTecActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jp_AdequaçãoLayout = new javax.swing.GroupLayout(jp_Adequação);
        jp_Adequação.setLayout(jp_AdequaçãoLayout);
        jp_AdequaçãoLayout.setHorizontalGroup(
            jp_AdequaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_AdequaçãoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl_AuditoriaOS1)
                .addGap(30, 30, 30)
                .addGroup(jp_AdequaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CheckBox_ErroTec)
                    .addGroup(jp_AdequaçãoLayout.createSequentialGroup()
                        .addComponent(CheckBox_Completa)
                        .addGap(18, 18, 18)
                        .addComponent(CheckBox_Pendente)
                        .addGap(18, 18, 18)
                        .addComponent(CheckBox_Conflito)
                        .addGap(18, 18, 18)
                        .addComponent(CheckBox_Suspenso)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jp_AdequaçãoLayout.setVerticalGroup(
            jp_AdequaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_AdequaçãoLayout.createSequentialGroup()
                .addGroup(jp_AdequaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBox_Completa)
                    .addComponent(lbl_AuditoriaOS1)
                    .addComponent(CheckBox_Pendente)
                    .addComponent(CheckBox_Conflito)
                    .addComponent(CheckBox_Suspenso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckBox_ErroTec, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jp_TabulaçãoLayout = new javax.swing.GroupLayout(jp_Tabulação);
        jp_Tabulação.setLayout(jp_TabulaçãoLayout);
        jp_TabulaçãoLayout.setHorizontalGroup(
            jp_TabulaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_TabulaçãoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp_TabulaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jp_Geral, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp_Desconexao, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp_Adequação, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp_AuditoriaOS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jp_TabulaçãoLayout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(lbl_Tabulações)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jp_TabulaçãoLayout.setVerticalGroup(
            jp_TabulaçãoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_TabulaçãoLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(lbl_Tabulações, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp_Geral, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp_Desconexao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp_AuditoriaOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp_Adequação, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 13, Short.MAX_VALUE))
        );

        lbl_Hora.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        lbl_Hora.setForeground(java.awt.Color.blue);
        lbl_Hora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lbl_Data.setFont(new java.awt.Font("Stencil", 0, 12)); // NOI18N
        lbl_Data.setForeground(java.awt.Color.blue);
        lbl_Data.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        btn_Iniciar.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        btn_Iniciar.setText("INICIAR");
        btn_Iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_IniciarActionPerformed(evt);
            }
        });

        btn_Pausar.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        btn_Pausar.setText("PAUSAR");
        btn_Pausar.setEnabled(false);
        btn_Pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_PausarActionPerformed(evt);
            }
        });

        btn_Sair.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        btn_Sair.setText("SAIR");
        btn_Sair.setEnabled(false);
        btn_Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SairActionPerformed(evt);
            }
        });

        btn_Salvar.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        btn_Salvar.setForeground(new java.awt.Color(51, 51, 255));
        btn_Salvar.setText("SALVAR");
        btn_Salvar.setEnabled(false);
        btn_Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_LogoFlex, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_LogoNet, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btn_Salvar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lbl_Cpf, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(FormatTxt_Cpf, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(lbl_Usuário1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_Usuário2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_Tipo1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_Tipo2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lbl_Base1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_Base2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(lbl_NvRegua, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbl_Nome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txt_NvRegua, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)
                                        .addComponent(lbl_Cidade)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_Cidade, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_Contrato)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_Contrato, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lbl_Segmento)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_Segmento))
                                    .addComponent(txt_NomeCliente)))
                            .addComponent(jp_Tabulação, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(401, 401, 401)
                                .addComponent(btn_Pausar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(566, 566, 566)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(lbl_Data, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lbl_Hora, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(9, 9, 9))
                                        .addComponent(btn_Sair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btn_Iniciar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_Hora, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Data, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Usuário1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Usuário2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Base1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Base2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Tipo1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_Tipo2, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Cidade)
                            .addComponent(txt_Cidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Contrato)
                            .addComponent(txt_Contrato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_Segmento)
                            .addComponent(txt_Segmento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_NvRegua)
                            .addComponent(txt_NvRegua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Nome)
                            .addComponent(txt_NomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_Cpf)
                            .addComponent(FormatTxt_Cpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jp_Tabulação, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Pausar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Sair, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_Salvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_LogoNet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_LogoFlex, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleParent(this);

        setSize(new java.awt.Dimension(1317, 692));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_CidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_CidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_CidadeActionPerformed

    private void txt_ContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_ContratoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_ContratoActionPerformed

    private void txt_NomeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_NomeClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_NomeClienteActionPerformed

    private void txt_SegmentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_SegmentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_SegmentoActionPerformed

    private void CheckBox_JaCanceladaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_JaCanceladaActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_JaCanceladaActionPerformed

    private void CheckBox_CanceladaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_CanceladaActionPerformed
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_CanceladaActionPerformed

    private void CheckBox_DesconectadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_DesconectadoActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_DesconectadoActionPerformed

    private void CheckBox_ReinstalaçãoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_ReinstalaçãoActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_ReinstalaçãoActionPerformed

    private void CheckBox_ErroGerDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_ErroGerDescActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_ErroGerDescActionPerformed

    private void CheckBox_MudancaPacoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_MudancaPacoteActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_MudancaPacoteActionPerformed

    private void CheckBox_MudancaEnderecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_MudancaEnderecoActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_MudancaEnderecoActionPerformed

    private void CheckBox_CanceladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_CanceladoActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_CanceladoActionPerformed

    private void CheckBox_PortabilidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_PortabilidadeActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Executada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_PortabilidadeActionPerformed

    private void btn_PausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_PausarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_PausarActionPerformed

    private void CheckBox_ErroTecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_ErroTecActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Completa.setSelected(false);
            CheckBox_Pendente.setSelected(false);
            CheckBox_Conflito.setSelected(false);
            CheckBox_Suspenso.setSelected(false);
    }//GEN-LAST:event_CheckBox_ErroTecActionPerformed

    private void CheckBox_DescInadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_DescInadActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_DescOpcao.setSelected(false);
            CheckBox_DescJáGerada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
    }//GEN-LAST:event_CheckBox_DescInadActionPerformed

    private void btn_SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btn_SairActionPerformed

    private void btn_IniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_IniciarActionPerformed
        
        btn_Pausar.setEnabled(true);
        btn_Sair.setEnabled(true);
        btn_Salvar.setEnabled(true);
        btn_Iniciar.setEnabled(!true);
        
        if(mod.getUsu_BPerfil().equals("FINALIZAÇÃO DE RÉGUAS")){
            
            mod.setUsu_Puxe_01("finalizacao");
            mod.setUsu_Puxe_02("finalizacao_tr");
            mod.setUsu_Puxe("FINALIZAÇÃO DE RÉGUAS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_NãoRevertido.setEnabled(true );
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_NãoRevertido.isSelected()){
                lbl_Var.setText("NÃO REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");                            
                }
                }
                }
                }
            }
        else{
            if(mod.getUsu_BPerfil().equals("AUDITORIA OS")){
            mod.setUsu_Puxe_01("auditoriaos");
            mod.setUsu_Puxe_02("auditoriaos_tr");
            mod.setUsu_Puxe("AUDITORIA OS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Cancelada.setEnabled(true);
            CheckBox_JaCancelada.setEnabled(true);
            CheckBox_Executada.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_Reinstalação.setEnabled(true);
            CheckBox_Portabilidade.setEnabled(true);
            CheckBox_Cancelado.setEnabled(true);
            CheckBox_MudancaEndereco.setEnabled(true);
            CheckBox_MudancaPacote.setEnabled(true);
            CheckBox_ErroGerDesc.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Cancelada.isSelected()){
                lbl_Var.setText("CANCELADA");
            }else{
                if(CheckBox_JaCancelada.isSelected()){
                lbl_Var.setText("JÁ CANCELADA");
            }else{
                if(CheckBox_Executada.isSelected()){
                lbl_Var.setText("EXECUTADA");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_Reinstalação.isSelected()){
                lbl_Var.setText("REINSTALAÇÃO");
            }else{
                if(CheckBox_Portabilidade.isSelected()){
                lbl_Var.setText("PORTABILIDADE");
            }else{
                if(CheckBox_Cancelado.isSelected()){
                lbl_Var.setText("CANCELADO");
            }else{
                if(CheckBox_MudancaEndereco.isSelected()){
                lbl_Var.setText("MUDANÇA DE ENDEREÇO");
            }else{
                if(CheckBox_MudancaPacote.isSelected()){
                lbl_Var.setText("MUDANÇA DE PACOTE");
            }else{
                if(CheckBox_ErroGerDesc.isSelected()){
                lbl_Var.setText("ERRO AO GERAR DESC.");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                
            }
            else{
            if(mod.getUsu_BPerfil().equals("AUDITORIAS - REV vs DESC")){
            mod.setUsu_Puxe_01("auditoriarevdesc");
            mod.setUsu_Puxe_02("auditoriarevdesc_tr");
            mod.setUsu_Puxe("AUDITORIAS - REV vs DESC");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_DescOpcao.setEnabled(true);
            CheckBox_DescInad.setEnabled(true);
            CheckBox_DescJáGerada.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_DescOpcao.isSelected()){
                lbl_Var.setText("DESC. OPÇÃO");
            }else{
                if(CheckBox_DescInad.isSelected()){
                lbl_Var.setText("DESC. INAD");
            }else{
                if(CheckBox_DescJáGerada.isSelected()){
                lbl_Var.setText("DESC. ABERTA");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
                }
                }
                }
                }
                }
                }
                }
            
            }
            else{
            if(mod.getUsu_BPerfil().equals("SEM LEAD - AUDITORIA OS")){
            mod.setUsu_Puxe_01("auditoriasemlead");
            mod.setUsu_Puxe_02("auditoriasemlead_tr");
            mod.setUsu_Puxe("SEM LEAD - AUDITORIA OS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
                }
                }
                }
                }
                        
            }
            else{
            if(mod.getUsu_BTipo().equals("PORTABILIDADE")){
            mod.setUsu_Puxe_01("portabilidade");
            mod.setUsu_Puxe_02("portabilidade_tr");
            mod.setUsu_Puxe("PORTABILIDADE");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_NãoRevertido.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_NãoRevertido.isSelected()){
                lbl_Var.setText("NÃO REVERTIDO");
                }
                }
                }
                }
                }
                       
            }
            else{
            if(mod.getUsu_BTipo().equals("EXTRAS")){
            mod.setUsu_Puxe_01("extras");
            mod.setUsu_Puxe_02("extras_tr");
            mod.setUsu_Puxe("EXTRAS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_NãoRevertido.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_NãoRevertido.isSelected()){
                lbl_Var.setText("NÃO REVERTIDO");
                }
                }
                }
                }
                }
            
            }
            else{
            if(mod.getUsu_BTipo().equals("ADEQUAÇÃO")){
            mod.setUsu_Puxe_01("adequacao");
            mod.setUsu_Puxe_02("adequacao_tr");
            mod.setUsu_Puxe("ADEQUAÇÃO");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_Completa.setEnabled(true);
            CheckBox_Pendente.setEnabled(true);
            CheckBox_Conflito.setEnabled(true);
            CheckBox_Suspenso.setEnabled(true);
            CheckBox_ErroTec.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_Completa.isSelected()){
                lbl_Var.setText("COMPLETA");
            }else{
                if(CheckBox_Pendente.isSelected()){
                lbl_Var.setText("PENDENTE");
            }else{
                if(CheckBox_Conflito.isSelected()){
                lbl_Var.setText("CONFLITO");
            }else{
                if(CheckBox_Suspenso.isSelected()){
                lbl_Var.setText("SUSPENSO");
            }else{
                if(CheckBox_ErroTec.isSelected()){
                lbl_Var.setText("ERRO NA ABA - TECNICO");
                }
                }
                }
                }
                }
                }
                }
                }
                }
            
            
            }
            }
            }
            }
            }
            }
            }
       
        
    }//GEN-LAST:event_btn_IniciarActionPerformed

    private void CheckBox_RevertidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_RevertidoActionPerformed
            CheckBox_NãoRevertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_RevertidoActionPerformed

    private void txt_NvReguaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_NvReguaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_NvReguaActionPerformed

    private void btn_SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SalvarActionPerformed

        mod.setTrat_Usuario(lbl_Usuário2.getText());
        mod.setTrat_Perfil(lbl_Tipo2.getText());
        mod.setTrat_Base(lbl_Base2.getText());
        mod.setTrat_Nivel(txt_NvRegua.getText());
        mod.setTrat_Cod_Cidade(txt_Cidade.getText());
        mod.setTrat_Contrato(txt_Contrato.getText());
        mod.setTrat_Segmento(txt_Segmento.getText());
        mod.setTrat_Cliente(txt_NomeCliente.getText());
        mod.setTrat_CPF(FormatTxt_Cpf.getText());
        mod.setTrat_Data(lbl_Data.getText());
        mod.setTrat_Tabulacao(lbl_Var.getText());
        mod.setTrat_HrFim(lbl_Hora.getText());
        dao.InsertTr(mod);
      
        
            if(mod.getUsu_BPerfil().equals("FINALIZAÇÃO DE RÉGUAS")){
            
            mod.setUsu_Puxe_01("finalizacao");
            mod.setUsu_Puxe_02("finalizacao_tr");
            mod.setUsu_Puxe("FINALIZAÇÃO DE RÉGUAS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_NãoRevertido.setEnabled(true );
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_NãoRevertido.isSelected()){
                lbl_Var.setText("NÃO REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");                            
                }
                }
                }
                }
            }
        else{
            if(mod.getUsu_BPerfil().equals("AUDITORIA OS")){
            mod.setUsu_Puxe_01("auditoriaos");
            mod.setUsu_Puxe_02("auditoriaos_tr");
            mod.setUsu_Puxe("AUDITORIA OS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Cancelada.setEnabled(true);
            CheckBox_JaCancelada.setEnabled(true);
            CheckBox_Executada.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_Reinstalação.setEnabled(true);
            CheckBox_Portabilidade.setEnabled(true);
            CheckBox_Cancelado.setEnabled(true);
            CheckBox_MudancaEndereco.setEnabled(true);
            CheckBox_MudancaPacote.setEnabled(true);
            CheckBox_ErroGerDesc.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Cancelada.isSelected()){
                lbl_Var.setText("CANCELADA");
            }else{
                if(CheckBox_JaCancelada.isSelected()){
                lbl_Var.setText("JÁ CANCELADA");
            }else{
                if(CheckBox_Executada.isSelected()){
                lbl_Var.setText("EXECUTADA");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_Reinstalação.isSelected()){
                lbl_Var.setText("REINSTALAÇÃO");
            }else{
                if(CheckBox_Portabilidade.isSelected()){
                lbl_Var.setText("PORTABILIDADE");
            }else{
                if(CheckBox_Cancelado.isSelected()){
                lbl_Var.setText("CANCELADO");
            }else{
                if(CheckBox_MudancaEndereco.isSelected()){
                lbl_Var.setText("MUDANÇA DE ENDEREÇO");
            }else{
                if(CheckBox_MudancaPacote.isSelected()){
                lbl_Var.setText("MUDANÇA DE PACOTE");
            }else{
                if(CheckBox_ErroGerDesc.isSelected()){
                lbl_Var.setText("ERRO AO GERAR DESC.");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                
            }
            else{
            if(mod.getUsu_BPerfil().equals("AUDITORIAS - REV vs DESC")){
            mod.setUsu_Puxe_01("auditoriarevdesc");
            mod.setUsu_Puxe_02("auditoriarevdesc_tr");
            mod.setUsu_Puxe("AUDITORIAS - REV vs DESC");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_DescOpcao.setEnabled(true);
            CheckBox_DescInad.setEnabled(true);
            CheckBox_DescJáGerada.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_DescOpcao.isSelected()){
                lbl_Var.setText("DESC. OPÇÃO");
            }else{
                if(CheckBox_DescInad.isSelected()){
                lbl_Var.setText("DESC. INAD");
            }else{
                if(CheckBox_DescJáGerada.isSelected()){
                lbl_Var.setText("DESC. ABERTA");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
                }
                }
                }
                }
                }
                }
                }
            
            }
            else{
            if(mod.getUsu_BPerfil().equals("SEM LEAD - AUDITORIA OS")){
            mod.setUsu_Puxe_01("auditoriasemlead");
            mod.setUsu_Puxe_02("auditoriasemlead_tr");
            mod.setUsu_Puxe("SEM LEAD - AUDITORIA OS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
                }
                }
                }
                }
                        
            }
            else{
            if(mod.getUsu_BTipo().equals("PORTABILIDADE")){
            mod.setUsu_Puxe_01("portabilidade");
            mod.setUsu_Puxe_02("portabilidade_tr");
            mod.setUsu_Puxe("PORTABILIDADE");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_NãoRevertido.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_NãoRevertido.isSelected()){
                lbl_Var.setText("NÃO REVERTIDO");
                }
                }
                }
                }
                }
                       
            }
            else{
            if(mod.getUsu_BTipo().equals("EXTRAS")){
            mod.setUsu_Puxe_01("extras");
            mod.setUsu_Puxe_02("extras_tr");
            mod.setUsu_Puxe("EXTRAS");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_NãoRevertido.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_NãoRevertido.isSelected()){
                lbl_Var.setText("NÃO REVERTIDO");
                }
                }
                }
                }
                }
            
            }
            else{
            if(mod.getUsu_BTipo().equals("ADEQUAÇÃO")){
            mod.setUsu_Puxe_01("adequacao");
            mod.setUsu_Puxe_02("adequacao_tr");
            mod.setUsu_Puxe("ADEQUAÇÃO");
            BeansUsuários model = dao.PuxeBase(mod);
            lbl_Base2.setText(model.getPuxe_Base());
            txt_NvRegua.setText(model.getPuxe_Nivel());
            txt_Cidade.setText(model.getPuxe_Cod_Cidade());
            txt_Contrato.setText(model.getPuxe_Contrato());
            txt_Segmento.setText(model.getPuxe_Segmento());
            txt_NomeCliente.setText(model.getPuxe_Cliente());
            dao.ExcluirF(mod);
            CheckBox_Revertido.setEnabled(true);
            CheckBox_JaTratado.setEnabled(true);
            CheckBox_Nao_Tratavel.setEnabled(true);
            CheckBox_Desconectado.setEnabled(true);
            CheckBox_Completa.setEnabled(true);
            CheckBox_Pendente.setEnabled(true);
            CheckBox_Conflito.setEnabled(true);
            CheckBox_Suspenso.setEnabled(true);
            CheckBox_ErroTec.setEnabled(true);
            mod.setTrat_HrInicio(lbl_Hora.getText());
            
            if(CheckBox_Revertido.isSelected()){
                lbl_Var.setText("REVERTIDO");
            }else{
                if(CheckBox_JaTratado.isSelected()){
                lbl_Var.setText("JÁ TRATADO");
            }else{
                if(CheckBox_Nao_Tratavel.isSelected()){
                lbl_Var.setText("NÃO TRATAVEL");
            }else{
                if(CheckBox_Desconectado.isSelected()){
                lbl_Var.setText("DESCONECTADO");
            }else{
                if(CheckBox_Completa.isSelected()){
                lbl_Var.setText("COMPLETA");
            }else{
                if(CheckBox_Pendente.isSelected()){
                lbl_Var.setText("PENDENTE");
            }else{
                if(CheckBox_Conflito.isSelected()){
                lbl_Var.setText("CONFLITO");
            }else{
                if(CheckBox_Suspenso.isSelected()){
                lbl_Var.setText("SUSPENSO");
            }else{
                if(CheckBox_ErroTec.isSelected()){
                lbl_Var.setText("ERRO NA ABA - TECNICO");
                }
                }
                }
                }
                }
                }
                }
                }
                }
            
            
            }
            }
            }
            }
            }
            }
            }
                    

        
    }//GEN-LAST:event_btn_SalvarActionPerformed

    private void CheckBox_NãoRevertidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_NãoRevertidoActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_NãoRevertidoActionPerformed

    private void CheckBox_JaTratadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_JaTratadoActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_NãoRevertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_JaTratadoActionPerformed

    private void CheckBox_Nao_TratavelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_Nao_TratavelActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_NãoRevertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            
    }//GEN-LAST:event_CheckBox_Nao_TratavelActionPerformed

    private void CheckBox_ExecutadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_ExecutadaActionPerformed
            CheckBox_Cancelada.setSelected(false);
            CheckBox_JaCancelada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Reinstalação.setSelected(false);
            CheckBox_Portabilidade.setSelected(false);
            CheckBox_Cancelado.setSelected(false);
            CheckBox_MudancaEndereco.setSelected(false);
            CheckBox_MudancaPacote.setSelected(false);
            CheckBox_ErroGerDesc.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Revertido.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
    }//GEN-LAST:event_CheckBox_ExecutadaActionPerformed

    private void CheckBox_DescOpcaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_DescOpcaoActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_DescInad.setSelected(false);
            CheckBox_DescJáGerada.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
    }//GEN-LAST:event_CheckBox_DescOpcaoActionPerformed

    private void CheckBox_DescJáGeradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_DescJáGeradaActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_DescOpcao.setSelected(false);
            CheckBox_DescInad.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
    }//GEN-LAST:event_CheckBox_DescJáGeradaActionPerformed

    private void CheckBox_CompletaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_CompletaActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Pendente.setSelected(false);
            CheckBox_Conflito.setSelected(false);
            CheckBox_Suspenso.setSelected(false);
            CheckBox_ErroTec.setSelected(false);
    }//GEN-LAST:event_CheckBox_CompletaActionPerformed

    private void CheckBox_PendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_PendenteActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Completa.setSelected(false);
            CheckBox_Conflito.setSelected(false);
            CheckBox_Suspenso.setSelected(false);
            CheckBox_ErroTec.setSelected(false);
    }//GEN-LAST:event_CheckBox_PendenteActionPerformed

    private void CheckBox_ConflitoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_ConflitoActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Completa.setSelected(false);
            CheckBox_Pendente.setSelected(false);
            CheckBox_Suspenso.setSelected(false);
            CheckBox_ErroTec.setSelected(false);
    }//GEN-LAST:event_CheckBox_ConflitoActionPerformed

    private void CheckBox_SuspensoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBox_SuspensoActionPerformed
            CheckBox_Revertido.setSelected(false);
            CheckBox_JaTratado.setSelected(false);
            CheckBox_Nao_Tratavel.setSelected(false);
            CheckBox_Desconectado.setSelected(false);
            CheckBox_Completa.setSelected(false);
            CheckBox_Pendente.setSelected(false);
            CheckBox_Conflito.setSelected(false);
            CheckBox_ErroTec.setSelected(false);
    }//GEN-LAST:event_CheckBox_SuspensoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaDemandas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaDemandas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaDemandas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaDemandas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaDemandas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox_Cancelada;
    private javax.swing.JCheckBox CheckBox_Cancelado;
    private javax.swing.JCheckBox CheckBox_Completa;
    private javax.swing.JCheckBox CheckBox_Conflito;
    private javax.swing.JCheckBox CheckBox_DescInad;
    private javax.swing.JCheckBox CheckBox_DescJáGerada;
    private javax.swing.JCheckBox CheckBox_DescOpcao;
    private javax.swing.JCheckBox CheckBox_Desconectado;
    private javax.swing.JCheckBox CheckBox_ErroGerDesc;
    private javax.swing.JCheckBox CheckBox_ErroTec;
    private javax.swing.JCheckBox CheckBox_Executada;
    private javax.swing.JCheckBox CheckBox_JaCancelada;
    private javax.swing.JCheckBox CheckBox_JaTratado;
    private javax.swing.JCheckBox CheckBox_MudancaEndereco;
    private javax.swing.JCheckBox CheckBox_MudancaPacote;
    private javax.swing.JCheckBox CheckBox_Nao_Tratavel;
    private javax.swing.JCheckBox CheckBox_NãoRevertido;
    private javax.swing.JCheckBox CheckBox_Pendente;
    private javax.swing.JCheckBox CheckBox_Portabilidade;
    private javax.swing.JCheckBox CheckBox_Reinstalação;
    private javax.swing.JCheckBox CheckBox_Revertido;
    private javax.swing.JCheckBox CheckBox_Suspenso;
    private javax.swing.JFormattedTextField FormatTxt_Cpf;
    private javax.swing.JButton btn_Iniciar;
    private javax.swing.JButton btn_Pausar;
    private javax.swing.JButton btn_Sair;
    private javax.swing.JButton btn_Salvar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jp_Adequação;
    private javax.swing.JPanel jp_AuditoriaOS;
    private javax.swing.JPanel jp_Desconexao;
    private javax.swing.JPanel jp_Geral;
    private javax.swing.JPanel jp_Tabulação;
    private javax.swing.JLabel lbl_AuditoriaOS;
    private javax.swing.JLabel lbl_AuditoriaOS1;
    private javax.swing.JLabel lbl_Base1;
    private javax.swing.JLabel lbl_Base2;
    private javax.swing.JLabel lbl_Cidade;
    private javax.swing.JLabel lbl_Contrato;
    private javax.swing.JLabel lbl_Cpf;
    private javax.swing.JLabel lbl_Data;
    private javax.swing.JLabel lbl_Desconexao;
    private javax.swing.JLabel lbl_Geral;
    private javax.swing.JLabel lbl_Hora;
    private javax.swing.JLabel lbl_LogoFlex;
    private javax.swing.JLabel lbl_LogoNet;
    private javax.swing.JLabel lbl_Nome;
    private javax.swing.JLabel lbl_NvRegua;
    private javax.swing.JLabel lbl_Segmento;
    private javax.swing.JLabel lbl_Tabulações;
    private javax.swing.JLabel lbl_Tipo1;
    private javax.swing.JLabel lbl_Tipo2;
    private javax.swing.JLabel lbl_Usuário1;
    private javax.swing.JLabel lbl_Usuário2;
    private javax.swing.JLabel lbl_Var;
    private javax.swing.JTextField txt_Cidade;
    private javax.swing.JTextField txt_Contrato;
    private javax.swing.JTextField txt_NomeCliente;
    private javax.swing.JTextField txt_NvRegua;
    private javax.swing.JTextField txt_Segmento;
    // End of variables declaration//GEN-END:variables

class hora implements ActionListener{
    @Override
    public void actionPerformed (ActionEvent e){
        Calendar now = Calendar.getInstance();
        lbl_Hora.setText(String.format("%1$tH:%1$tM:%1$tS", now));
    }
}

}//Fim da classe Principal.
